#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from inference_engine import diagnose_input

def test_categorias():
    # Casos de prueba mejorados
    casos_prueba = [
        # Casos espec√≠ficos de Toyota Corolla (deber√≠an funcionar bien)
        "el motor de mi toyota corolla hace ruido extra√±o",
        "los frenos de mi corolla chirr√≠an al frenar",
        "la transmisi√≥n de mi toyota patina",
        "la suspensi√≥n de mi corolla rebota",
        "la bater√≠a de mi toyota est√° descargada",
        "el combustible de mi corolla huele mal",
        "el refrigerante de mi toyota est√° bajo",
        "la direcci√≥n de mi corolla est√° dura",
        "los neum√°ticos de mi toyota est√°n lisos",
        
        # Casos vagos (deber√≠an ser rechazados o dar diagn√≥sticos generales)
        "problema general del carro",
        "no funciona nada",
        "el auto est√° mal",
        "tiene problemas",
        
        # Casos irrelevantes (deber√≠an ser rechazados)
        "me duele la cabeza",
        "tengo fiebre",
        "mi casa tiene problemas",
        "mi computadora no funciona",
        "necesito ir al m√©dico",
        "mi tel√©fono est√° roto",
        
        # Casos espec√≠ficos pero sin contexto de veh√≠culo
        "hace ruido",
        "no funciona",
        "est√° roto",
    ]
    
    print("=== PRUEBAS DEL MOTOR DE INFERENCIA MEJORADO ===\n")
    print("Motor especializado para Toyota Corolla - Detecci√≥n de fallas mec√°nicas\n")
    
    for i, caso in enumerate(casos_prueba, 1):
        print(f"Prueba {i}: '{caso}'")
        resultado = diagnose_input(caso)
        
        print(f"  - Puntuaci√≥n: {resultado['puntuaci√≥n']}")
        print(f"  - Categor√≠as detectadas: {resultado['categor√≠as']}")
        print(f"  - N√∫mero de categor√≠as: {len(resultado['categor√≠as'])}")
        
        if resultado['categor√≠as']:
            print(f"  - ‚úÖ Categor√≠as espec√≠ficas: {', '.join(resultado['categor√≠as'])}")
        else:
            print(f"  - ‚ö†Ô∏è  NO SE DETECTARON CATEGOR√çAS")
        
        print(f"  - Diagn√≥stico: {resultado['diagn√≥stico']}")
        print(f"  - Recomendaci√≥n: {resultado['recomendaci√≥n_general']}")
        print("-" * 60)

def test_formulario_guiado():
    print("\n" + "="*80)
    print("PRUEBAS ESPEC√çFICAS PARA FORMULARIO GUIADO")
    print("Simulando m√∫ltiples s√≠ntomas seleccionados por el usuario")
    print("="*80 + "\n")
    
    # Casos de formulario guiado con m√∫ltiples s√≠ntomas
    casos_formulario = [
        # Frenos con m√∫ltiples s√≠ntomas
        "problemas en frenos: nivel de l√≠quido bajo, pastillas desgastadas, sensores fallando",
        "sistema de frenos: pedal suave, chirrido al frenar, luz de frenos encendida",
        "frenos del auto: no frena bien, vibraci√≥n al frenar, pastillas de freno",
        
        # Motor con m√∫ltiples s√≠ntomas
        "motor del auto: ruido extra√±o, vibraci√≥n, p√©rdida de potencia",
        "problemas motor: sobrecalentamiento, consumo de aceite, humo",
        "motor toyota: no arranca, bater√≠a descargada, alternador fallando",
        
        # Transmisi√≥n con m√∫ltiples s√≠ntomas
        "transmisi√≥n: patina, ruidos, l√≠quido bajo",
        "cambio de marchas: problemas, embrague desgastado, autom√°tica",
        
        # El√©ctrico con m√∫ltiples s√≠ntomas
        "sistema el√©ctrico: bater√≠a, alternador, luces, sensores",
        "problemas el√©ctricos: no arranca, cortocircuito, fusibles",
        
        # Combustible con m√∫ltiples s√≠ntomas
        "combustible: nivel bajo, olor a gasolina, inyectores, filtro",
        "sistema combustible: bomba, consumo alto, calidad",
        
        # Refrigeraci√≥n con m√∫ltiples s√≠ntomas
        "refrigeraci√≥n: nivel bajo, termostato, ventilador, radiador",
        "sistema refrigeraci√≥n: refrigerante, temperatura alta, fuga",
        
        # Suspensi√≥n con m√∫ltiples s√≠ntomas
        "suspensi√≥n: rebota, golpes, amortiguadores, resortes",
        "sistema suspensi√≥n: inestable, ruidos, desgaste",
        
        # Direcci√≥n con m√∫ltiples s√≠ntomas
        "direcci√≥n: dura, alineaci√≥n, balanceo, l√≠quido",
        "sistema direcci√≥n: volante, desalineado, desbalanceado",
        
        # Neum√°ticos con m√∫ltiples s√≠ntomas
        "neum√°ticos: presi√≥n, desgaste, lisos, da√±os",
        "llantas: aire, inflado, gastadas, reemplazo",
    ]
    
    for i, caso in enumerate(casos_formulario, 1):
        print(f"Formulario {i}: '{caso}'")
        resultado = diagnose_input(caso)
        
        print(f"  - Puntuaci√≥n: {resultado['puntuaci√≥n']}")
        print(f"  - Categor√≠as detectadas: {resultado['categor√≠as']}")
        print(f"  - N√∫mero de categor√≠as: {len(resultado['categor√≠as'])}")
        
        if resultado['categor√≠as']:
            print(f"  - ‚úÖ Categor√≠as espec√≠ficas: {', '.join(resultado['categor√≠as'])}")
            if 's√≠ntomas_detectados' in resultado:
                print(f"  - üìä S√≠ntomas por categor√≠a:")
                for cat, datos in resultado['s√≠ntomas_detectados'].items():
                    print(f"    ‚Ä¢ {cat}: {len(datos['s√≠ntomas'])} s√≠ntomas (peso: {datos['peso_total']})")
        else:
            print(f"  - ‚ö†Ô∏è  NO SE DETECTARON CATEGOR√çAS")
        
        print(f"  - Diagn√≥stico: {resultado['diagn√≥stico']}")
        print(f"  - Recomendaci√≥n: {resultado['recomendaci√≥n_general']}")
        print("-" * 60)

if __name__ == "__main__":
    test_categorias()
    test_formulario_guiado() 